# set remote ssh port to replace the default 22 for security
remote_port: 7822

# User Playbook
user_git_ssh_add_keys:
  - /Users/macusername/.ssh/id_rsa.pub
user_git_ssh_remove_keys: []
user_git_full_name: "Michael Porter"
user_git_email_address: "devops@example.com"
user_git_editor: nano
# pip install passlib
# python -c "from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))"
# gitpass
# ansible-vault encrypt_string 'Encrypted-Password' --name 'user_git_password'
user_git_password: '$6$87GoscsR37UA5pCh$cUS5nasIOMqcZcIq8mOmwvPrvA6VGjMKr/UB5OAWyxZNuo0c7mVZFf3gMkEJ/RrHCVriB8QVF6UFgIMw0Jka80'

user_sudouser_username: "demo"
user_sudouser_full_name: "Michael Porter"
user_sudouser_ssh_add_keys:
  - /Users/macusername/.ssh/id_rsa.pub
user_sudouser_ssh_remove_keys: []
# pip install passlib
# python -c "from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))"
# sudopass
# ansible-vault encrypt_string 'Encrypted-Password' --name 'user_sudouser_password'
user_sudouser_password: '$6$zvl9ImKzmvuC8Lmh$BtooGGCZSzCXHd0BW817KpgZ4HvBcDma58NH73TA8eRGsvOt7VuaoA05JAHlnV5W7NNlplS6zOhw0PFuIFRAy.'

# Certbot
certbot_email: "devops@example.com"
certbot_create_if_missing: yes
# Install from source to get dns plugin folders
certbot_install_from_source: yes
# By Default certbot will use the testing server. For live certs, switch the comments
# certbot_cloudflare_acme_server: "{{ certbot_cloudflare_acme_live }}"
certbot_cloudflare_acme_server: "{{ certbot_cloudflare_acme_test }}"
# Email address for Cloudflare Global API Key
certbot_cloudflare_email: "cloudflare@example.com"
# ansible-vault encrypt_string 'cloudflareAPIKey' --name 'certbot_cloudflare_api_key'
certbot_cloudflare_api_key: ''

config_htaccess_user: "demo"
# Encrypt htaccess password
## ansible-vault encrypt_string 'demo' --name 'config_htaccess_pass'
config_htaccess_pass: 'demo'
# base domain for webgroup hosts URL will become https://folder.webgroup01.example.com
base_webgroup_domain: "example.com"
# if you use gmail/gsuite and want to setup postfix as a relay set this to true
config_postfix_use_gmail: false
config_postfix_gmail_address: "devops@gmail.com"
## ansible-vault encrypt_string 'gmailpass' --name 'config_postfix_gmail_pass'
config_postfix_gmail_pass: 'gmailpass'
# Allowed domains or address to send to, all others will be dropped.
config_postfix_allowed: []
  # - example.com
  # - devops@gmail.com

## ansible-vault encrypt_string 'rootpassword' --name 'mysql_root_password'
mysql_root_password: 'rootpassword'
setup_jenkins_url: "{{jenkins_vhost}}"
setup_jenkins_github_deploy: "global-builds/pr_deploy/"
## ansible-vault encrypt_string 'deploy-token' --name 'setup_jenkins_github_deploy_key'
setup_jenkins_github_deploy_key: 'deploy-token'
setup_jenkins_clean_job: "global-builds/clean-sites/"
## ansible-vault encrypt_string 'cleanup-token' --name 'setup_jenkins_clean_job_key'
setup_jenkins_clean_job_key: 'cleanup-token'

setup_servers: "{{ groups['webgroup'] }}"
## ansible-vault encrypt_string 'slackAPIKey' --name 'setup_slack_api'
setup_slack_api: ''

# Jenkins Playbook
jenkins_vhost: "demojenkins.example.com"
jenkins_email: "jenkins@example.com"
jenkins_admin_username: admin
# ansible-vault encrypt_string 'demo' --name 'jenkins_admin_password'
jenkins_admin_password: 'demo'

# Logwatch Playbook
logwatch_send_to: "mailto@example.com"
logwatch_send_from: "mailfrom@example.com"

# Composer
composer_home_path: '/home/git/.composer'
composer_home_owner: git
composer_home_group: git
composer_global_packages:
  - { name: phpunit/phpunit, release: "4.7.*" }
  - { name: pantheon-systems/terminus, release: "^1.8" }
  - { name: squizlabs/php_codesniffer, release: "^2.9.1" }
  - { name: phploc/phploc, release: "*" }
composer_keep_updated: true
composer_add_to_path: true

# Drush
drush_launcher_install: no
drush_install_from_source: yes
drush_source_install_bin_path: /usr/local/bin/drush
drush_source_install_path: /usr/local/share/drush
drush_source_install_version: "8.x"
drush_keep_updated: yes
drush_force_update: no

# swap
swapfile_size: 1GB
my_custom_path_var: /usr/local/scripts

# for jq
package_name: jq

setup_apt_install:
  - aptitude
  - build-essential
  - cpanminus
  - curl
  - imagemagick
  - libcache-cache-perl
  - libdbd-mysql-perl
  - libdbi-perl
  - libffi-dev
  - libssl-dev
  - librose-datetime-perl
  - libtext-csv-perl
  - libtext-csv-xs-perl
  - ntp
  - perl
  - php-pear
  - python-apt
  - python-dev
  - python-pycurl
  - ruby-dev
  - s3cmd
  - sshpass
  - unzip

## Pantheon CI https://pantheon.io/docs/guides/jenkins/
config_terminus_ci: false